generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auth_provider {
  user_id    String    @id @db.Uuid
  google_id  String?   @db.VarChar
  github_id  String?   @db.VarChar
  discord_id String?   @db.VarChar
  user_data  user_data @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model room {
  room_id            String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creator_id         String?             @db.Uuid
  room_desc          String?
  is_private         Boolean?
  auto_speaker       Boolean?
  chat_enabled       Boolean?
  created_at         DateTime?           @default(now()) @db.Timestamp(6)
  hand_raise_enabled Boolean?
  last_active        DateTime?           @db.Timestamp(6)
  ended              Boolean?            @default(false)
  map_key            String
  user_data          user_data?          @relation(fields: [creator_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  room_ban           room_ban[]
  room_category      room_category[]
  room_status        room_status[]
  user_notification  user_notification[]
}

model room_ban {
  room_id    String    @db.Uuid
  user_id    String    @db.Uuid
  ban_type   String?   @db.VarChar
  created_at DateTime? @db.Timestamp(6)
  room       room      @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)
  user_data  user_data @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([room_id, user_id])
}

model room_category {
  room_id  String @db.Uuid
  category String @db.VarChar
  room     room   @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([room_id, category])
}

model room_status {
  user_id     String    @db.Uuid
  room_id     String    @db.Uuid
  is_speaker  Boolean?
  is_mod      Boolean?
  raised_hand Boolean?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  is_muted    Boolean?
  pos_x       Int
  pos_y       Int
  dir         String
  skin        String
  room        room      @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)
  user_data   user_data @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, room_id])
}

model user_data {
  user_id                                           String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_name                                         String?             @db.VarChar
  email                                             String?             @unique @db.VarChar
  display_name                                      String?             @db.VarChar
  avatar_url                                        String?             @db.VarChar
  bio                                               String?
  current_room_id                                   String?             @db.Uuid
  created_at                                        DateTime?           @default(now()) @db.Timestamp(6)
  last_seen                                         DateTime?           @db.Timestamptz(6)
  auth_provider                                     auth_provider?
  room                                              room[]
  room_ban                                          room_ban[]
  room_status                                       room_status[]
  user_follows_user_follows_is_followingTouser_data user_follows[]      @relation("user_follows_is_followingTouser_data")
  user_follows_user_follows_user_idTouser_data      user_follows[]      @relation("user_follows_user_idTouser_data")
  user_notification                                 user_notification[]
}

model user_follows {
  user_id                                        String    @db.Uuid
  is_following                                   String    @db.Uuid
  created_at                                     DateTime? @db.Timestamp(6)
  user_data_user_follows_is_followingTouser_data user_data @relation("user_follows_is_followingTouser_data", fields: [is_following], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  user_data_user_follows_user_idTouser_data      user_data @relation("user_follows_user_idTouser_data", fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, is_following])
}

model user_notification {
  notification_id String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id         String?    @db.Uuid
  room_id         String?    @db.Uuid
  category        String?    @db.VarChar
  content         String?    @db.VarChar
  is_read         Boolean?   @default(false)
  created_at      DateTime?  @default(now()) @db.Timestamp(6)
  room            room?      @relation(fields: [room_id], references: [room_id], onDelete: Cascade, onUpdate: NoAction)
  user_data       user_data? @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}
